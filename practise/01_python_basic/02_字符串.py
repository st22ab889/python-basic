# 字符串的三种定义方法: 单引号定义法、 双引号定义法(最常用)、 三引号定义法(支持换行，写法和多行注释一样，如果没有变量接收就是注释, 有变量接收就是字符串)
name = '牌神'
name = "牌神"
name = """
牌神
python
"""

# 如果字符串要包含引号本身: 用单引号包含双引号、用双引号包含单引号、使用转移符
name = '"牌神"'
name = "'牌神'"
name = "\"牌神"


# 字符串拼接：字符串字面量拼接、字符串字面量和字符串变量的拼接
name = "牌" + "神"
name2 = "python"
num = 10
print("---" + name + "----" + name2 + "----" + str(num))   # 整型和字符串不能用"+"直接进行拼接, 可以使用占位的方式进行拼接

# 字符串格式化,使用占位方式.
print(">>---%s" % name)         # %标识占位, s标识将变量变成字符串放入占位的地方
print(">>---%s----%s----%s" % (name, name2, num))       # 这里实际上把数字转为了字符串， %s表示将内容转换为字符串放入占位位置
print(">>---%s----%s----%d" % (name, name2, num))       # %d表示将内容转换为整形放入占位位置
print(">>---%s----%s----%f" % (name, name2, num))       # %f表示将内容转换为浮点形放入占位位置


# 字符串格式化的精度控制. 使用"m.n"控制数据的宽度和精度.
# m 控制宽度,要求是数字(很少使用),设置的宽度小于数字自身,不生效. 如果数字11被设置为%5d, 就会变成"[空格][空格][空格]11", 用三个空格弥补宽度
# .n 控制小数点精度, 要求是数字, 会进行小数的四舍五入, 会导致数据失真
print(">>>>----%6.2f----%.3f" % (num, num))


# 字符串格式方法2：快速格式化(不关心类型，不关心精度控制)，  语法: f"内容(变量)"
print(f">>>>>>---{name}----{name2}----{num}")


# 对表达式进行格式化
print("@@---2 * 2 =", 2 * 2)
print("@@---2 * 2 = %d , 3 + 3 = %d" % (2 * 2, 3 + 3))
print(f"@@---2 * 2 = {2 * 2} , type = {type(2*2)}")


# 数据输入 input 语句, 无论键盘输入什么类型的数据, 获取到的数据永远都是字符串类型
print("please input your name")
name = input()
print(f"hello {name}")
age = input("please input your age")        # input("提示信息")
print(f"your age is {age}")
