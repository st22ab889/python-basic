"""
全局变量带来的问题：
    代码在命名空间上（变量定义）不够干净、整洁
    全局变量有被修改的风险

闭包的用途和用法： 在函数嵌套的前提下，内部函数使用了外部函数的变量，并且外部函数返回了内部函数，把这个使用外部函数变量的内部函数称为闭包。

nonlocal关键字的作用：修改外部函数变量的值
    需要使用 nonlocal关键字修饰外部函数的变量，才可在内部函数中修改它

闭包注意事项：
    优点，使用闭包可以让我们得到：
        无需定义全局变量即可实现通过函数，持续的访问、修改某个值
        闭包使用的变量的所用于在函数内，难以被错误的调用修改
    缺点：
        由于内部函数持续引用外部函数的值，所以会导致这一部分内存空间不被释放，一直占用内存
"""


# 闭包简单示例
def outer(logo):                            # 外部函数

    def inner(msg):                         # 内部函数(闭包)
        print(f"{logo} ---- {msg}")

    return inner                            # 返回内部函数


func_1 = outer("这是外部函数的参数")
func_1("这是内部函数的参数")


# nonlocal关键字
def outer(num_1):

    def inner(num_2):
        nonlocal num_1          # 如果不加 nonlocal 修饰符, 只能用这个变量, 不能修改这个变量
        num_1 += num_2
        print(num_1)
        """
        # 如果不加  nonlocal 修饰符, 使用一个中间变量也可以间接解决这个问题
        temp = num_1
        temp += num_2
        print(temp)
        """
    return inner


func_1 = outer(10)
func_1(20)

